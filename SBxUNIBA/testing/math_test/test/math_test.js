// Generated by CoffeeScript 1.3.3
(function() {
  var buster;

  buster = this.buster || {};

  if (typeof module === "object" && typeof require === "function") {
    buster = require("buster");
  }

  buster.testCase("テスト勉強会 Math", {
    "abs()": function() {
      assert.equals(Math.abs(1), 1);
      assert.equals(Math.abs(-1), 1);
      assert.equals(Math.abs(1.1), 1.1);
      return assert.equals(Math.abs(-1.1), 1.1);
    },
    "acos()": function() {
      assert.equals(Math.acos(Math.cos(2.5)), 2.5);
      return assert.equals(Math.acos(Math.cos(0)), 0);
    },
    "asin()": function() {
      assert.equals(Math.asin(Math.sin(1.0)), 1.0);
      return assert.equals(Math.asin(Math.sin(0)), 0);
    },
    "atan()": function() {
      assert.equals(Math.atan(Math.tan(1.5)), 1.5);
      assert.equals(Math.atan(Math.tan(0)), 0);
      return assert.near(Math.atan(Math.tan(-2.78)), Math.PI - 2.78, 0.000000001);
    },
    "atan2()": function() {
      assert.equals(Math.atan2(Math.sin(0), Math.cos(0)), 0);
      assert.equals(Math.atan2(Math.sin(Math.PI), Math.cos(Math.PI)), Math.PI);
      return assert.equals(Math.atan2(Math.sin(Math.PI * 0.5), Math.cos(Math.PI * 0.5)), Math.PI * 0.5);
    },
    "ceil()": function() {
      assert.equals(Math.ceil(0.5), 1);
      return assert.equals(Math.ceil(-0.5), 0);
    },
    "cos()": function() {
      assert.equals(Math.cos(0), 1);
      assert.near(Math.cos(Math.PI * 0.5), 0, 0.0000000001);
      return assert.near(Math.cos(Math.PI), -1, 0.0000000001);
    },
    "//E": function() {
      buster.log(Math.E);
      return buster.log(Math.log(2));
    },
    "exp()": function() {
      assert.near(Math.exp(2), Math.E * Math.E, 0.0000000001);
      return assert.near(Math.exp(4), Math.E * Math.E * Math.E * Math.E, 0.0000000001);
    },
    "floor()": function() {
      assert.equals(Math.floor(1.5), 1);
      return assert.equals(Math.floor(-1.5), -2);
    },
    "//LN10, LN2, log(), LOG10E, LOG2E": function() {},
    "max()": function() {
      assert.equals(Math.max(0, 1), 1);
      return assert.equals(Math.max(0.0001, 0.0002), 0.0002);
    },
    "min()": function() {
      assert.equals(Math.min(0, 1), 0);
      return assert.equals(Math.min(0.0001, 0.0002), 0.0001);
    },
    "PI": function() {
      return assert.near(Math.PI, 3.141592, 0.000001);
    },
    "pow()": function() {
      var pow;
      pow = function(num, num2) {
        var ans, i, _i;
        ans = 1;
        for (i = _i = 1; 1 <= num2 ? _i <= num2 : _i >= num2; i = 1 <= num2 ? ++_i : --_i) {
          ans *= num;
        }
        return ans;
      };
      assert.equals(Math.pow(2, 10), pow(2, 10));
      return assert.equals(Math.pow(34, 5), pow(34, 5));
    },
    "random()": function() {
      assert.greater(Math.random(), -0.00000000000000000000000000001);
      assert.isTrue(Math.random() >= 0);
      return assert.less(Math.random(), 1);
    },
    "round()": function() {
      assert.equals(Math.round(0.5), 1);
      assert.equals(Math.round(0.4), 0);
      assert.equals(Math.round(1.5), (1.5 + 0.5) >> 0);
      return assert.equals(Math.round(1.4), (1.4 + 0.5) >> 0);
    },
    "sin()": function() {
      assert.equals(Math.sin(0), 0);
      assert.near(Math.sin(Math.PI * 0.5), 1, 0.0000000001);
      return assert.near(Math.sin(Math.PI), 0, 0.0000000001);
    },
    "sqrt()": function() {
      return assert.near(Math.sqrt(2), 1.41421356, 0.00000001);
    },
    "SQRT1_2": function() {
      return assert.equals(Math.SQRT1_2, Math.sqrt(0.5));
    },
    "SQRT2": function() {
      assert.near(Math.SQRT2, 1.41421356, 0.00000001);
      return assert.equals(Math.SQRT2, Math.sqrt(2));
    },
    "//tan()": function() {}
  });

}).call(this);
